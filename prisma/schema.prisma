generator client {
  provider = "prisma-client-js"
}

datasource new_db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Vote {
  id               String   @id @default(cuid())
  workshopId       String
  createdAt        DateTime @default(now())
  stakeAddress     String?
  coseKeyHex       String?
  coseSignatureHex String?
  message          String?
  selection1       String
  selection2       String
  selection3       String
  selection4       String
  selection5       String
  userId           String
  cardanoAddress   String?
  user             User     @relation(fields: [userId], references: [id])
  workshop         Workshop @relation(fields: [workshopId], references: [id])
}

model VoteBackup {
  id               String   @id @default(cuid())
  workshopId       String
  userId           String
  createdAt        DateTime @default(now())
  stakeAddress     String?
  coseKeyHex       String?
  coseSignatureHex String?
  message          String?
  selection1       String
  selection2       String
  selection3       String
  selection4       String
  selection5       String
  cardanoAddress   String?
  user             User     @relation(fields: [userId], references: [id])
  workshop         Workshop @relation(fields: [workshopId], references: [id])
}

model Workshop {
  id                  String                @id @default(cuid())
  readableName        String
  adminEmail          String
  shortIdName         String                @unique
  status              Int                   @default(0)
  secondaryAdminEmail String?
  scheduledFor        DateTime?             @default(now())
  nextTiebreakRank    Int?
  registration        Registration[]
  registrationCodes   RegistrationCode[]
  TiebreakBackupVotes TiebreakBackupVotes[]
  TiebreakRound       TiebreakRound[]
  TiebreakVote        TiebreakVote[]
  TiebreakVoteResult  TiebreakVoteResult[]
  votes               Vote[]
  VoteBackup          VoteBackup[]
  VoteResult          VoteResult[]
}

model Registration {
  id                 String               @id @default(cuid())
  codeId             String               @unique
  workshopId         String
  userId             String
  candidate          Boolean              @default(false)
  candidateName      String               @default("")
  registeredAt       DateTime             @default(now())
  code               RegistrationCode     @relation(fields: [codeId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  workshop           Workshop             @relation(fields: [workshopId], references: [id])
  TiebreakVoteResult TiebreakVoteResult[]
  VoteResult         VoteResult[]

  @@unique([userId, workshopId])
  @@unique([candidateName, workshopId])
}

model RegistrationCode {
  id           String        @id @default(cuid())
  workshopId   String
  code         String        @unique
  registration Registration?
  workshop     Workshop      @relation(fields: [workshopId], references: [id])
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  web3AuthAddress     String?
  MPCBackupFactorKey  MPCBackupFactorKey[]
  registrations       Registration[]
  TiebreakBackupVotes TiebreakBackupVotes[]
  TiebreakVote        TiebreakVote[]
  votes               Vote[]
  VoteBackup          VoteBackup[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Manager {
  id      String          @id @default(cuid())
  email   String          @unique
  actions ManagerAction[]
}

model ManagerAction {
  id         String   @id @default(cuid())
  managerId  String
  actionType String
  details    String
  timestamp  DateTime @default(now())
  manager    Manager  @relation(fields: [managerId], references: [id])
}

model VoteResult {
  id                String       @id @default(cuid())
  workshopId        String
  registrationId    String
  points            Float
  rank              Int
  createdAt         DateTime     @default(now())
  tiebreakCandidate Boolean      @default(false)
  Registration      Registration @relation(fields: [registrationId], references: [id])
  workshop          Workshop     @relation(fields: [workshopId], references: [id])

  @@unique([workshopId, registrationId])
  @@index([workshopId, points])
}

model TiebreakVote {
  id               String        @id @default(cuid())
  workshopId       String
  createdAt        DateTime      @default(now())
  stakeAddress     String?
  coseKeyHex       String?
  coseSignatureHex String?
  message          String
  selection1       String
  selection2       String
  selection3       String
  selection4       String
  selection5       String
  userId           String
  tiebreakRoundId  String
  cardanoAddress   String?
  TiebreakRound    TiebreakRound @relation(fields: [tiebreakRoundId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  workshop         Workshop      @relation(fields: [workshopId], references: [id])
}

model TiebreakVoteResult {
  id              String        @id @default(cuid())
  workshopId      String
  registrationId  String
  points          Float
  rank            Int
  createdAt       DateTime      @default(now())
  tiebreakRoundId String
  Registration    Registration  @relation(fields: [registrationId], references: [id])
  TiebreakRound   TiebreakRound @relation(fields: [tiebreakRoundId], references: [id])
  workshop        Workshop      @relation(fields: [workshopId], references: [id])

  @@unique([workshopId, registrationId, tiebreakRoundId])
  @@index([workshopId, points])
}

model TiebreakBackupVotes {
  id               String        @id @default(cuid())
  workshopId       String
  userId           String
  createdAt        DateTime      @default(now())
  stakeAddress     String?
  coseKeyHex       String?
  coseSignatureHex String?
  message          String?
  selection1       String
  selection2       String
  selection3       String
  selection4       String
  selection5       String
  tiebreakRoundId  String
  cardanoAddress   String?
  TiebreakRound    TiebreakRound @relation(fields: [tiebreakRoundId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  workshop         Workshop      @relation(fields: [workshopId], references: [id])
}

model TiebreakRound {
  id                  String                @id @default(cuid())
  workshopId          String
  tbfplace            Int
  candidates          String[]
  index               Int
  status              Int                   @default(0)
  TiebreakBackupVotes TiebreakBackupVotes[]
  workshop            Workshop              @relation(fields: [workshopId], references: [id])
  TiebreakVote        TiebreakVote[]
  TiebreakVoteResult  TiebreakVoteResult[]

  @@unique([workshopId, tbfplace, index])
}

model AdminActionLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  email      String
  action     String
  workshopId String
  details    String?
}

model ErrorLog {
  id        String   @id @default(cuid())
  message   String
  stack     String?
  details   String?
  url       String?
  userAgent String?
  userId    String?
  createdAt DateTime @default(now())
}

model MPCBackupFactorKey {
  id        String   @id @default(cuid())
  userId    String
  email     String   @unique
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
